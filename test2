/*
@author:Muhammed Nisamudheen
@version:typescript
@purpose:program that can be used to maintain an address book. An address book
holds a collection of entries, each recording a person's first and last names, address, city, state, zip, and
phone number.
*/


var readline = require('readline-sync');
//class to instatiate the person
class Person {
    firstName:string;
    lastName:string;
    address:string;
    city:string; 
    state:string;
    zip:number;
    phonenumber:number;

    constructor(firstName:string,lastName:string,address:string,city:string,state:string,zip:number,phonenumber:number){
        this.firstName=firstName;
        this.lastName=lastName;
        this.address=address;
        this.city=city;
        this.state=state;
        this.zip=zip;
        this.phonenumber=phonenumber;
    }
}


// address book class to instatiate addresss book objects
class AddressBook {
    person:any=[]  // array of persons storing the person objects in address book
    constructor(){
    }


    //method to add a new person details to the address book
    add(firstName:string,lastName:string,address:string,city:string,state:string,zip:number,phonenumber:number){
       this.person.push(new Person(firstName,lastName,address,city,state,zip,phonenumber))
    }


    // method to get the details of the persons in the address book
    get(){ 
        for (let per of this.person){
            console.log(per)
        }
    }


    // method to edit the details of the persons in the address book
    edit(Name){
        try{
        for (let i=0;i<this.person.length;i++){
        if ((this.person[i].firstName)==Name){
            var option = parseInt(readline.question("enter the option \n 1->address\n2->city"));
            switch(option){
                case 1:{
                    this.person[i].address=readline.question("enter the new address");
                    break;
                }
                case 2:
                    {
                    this.person[i].city=readline.question("enter the new city");
                    break;
               }
               case 3:{
                this.person[i].state=readline.question("enter the new state");
                break;
               }
               case 4:{
                this.person[i].zip=parseInt(readline.question("enter the new zip"));
                break;
               }
               case 5:{
                this.person[i].phonenumber=parseInt(readline.question("enter the new phonenumber"));
                break;
               }
        default:{
            console.log("please do enter any one of the above");
            break;
        }
            }
        break;
        }
        else{
       
        continue;
        }
    }
}
catch (e){
    console.log('error',e)
}
    }


    // method to delete the person from the address book
    delete(Name){
        for (let i=0;i<this.person.length;i++){
            if ((this.person[i].firstName)==Name){
                this.person.splice(i,1);
                return;
}}}


// method to display the person in address book accordig to tha last name ties breaked  by firstname
display(){
    var so=this.person.sort(function (a,b) {
        if (a.lastName < b.lastName) {
            return -1;
        }
        else if (b.lastName < a.lastName) {
            return 1;
        }
        else if (a.lastName==b.lastName)
        {
            if (a.firstName < b.firstName) {
            return -1;
        }
            else{
            return 1
            }
    }
    });
    console.log(so)
}


// method to display the person in address book accordig to tha zip ties breaked  by firstname
zipdisplay(){
    var so=this.person.sort(function (a,b) {
        if (a.zip < b.zip) {
            return -1;
        }
        else if (b.zip < a.zip) {
            return 1;
        }
        else if (a.zip==b.zip)
        {
            if (a.firstName < b.firstName) {
            return -1;
        }
            else{
            return 1;
            }
    }
    });
    console.log(so)

}


// main method to start the opertaions 
main(){
    var option=parseInt(readline.question("enter the option \n1->add the person\n2->edit the person\n3->delete the person\n4->display person according to last name\n5->display person according to zip"));
    switch(option){
        case 1:
            try{
            let first_name=readline.question("enter the firstname");
            let last_name=readline.question("enter the last name");
            let addres=readline.question("enter the address");
            let city=readline.question("city");
            let temp_State=readline.question("state");
            let temp_Zip=parseInt(readline.question("zip"));
            console.log("dat",temp_Zip)
            if (temp_Zip.valueOf()==Number{
                throw new Error("input of zip should be integer")
            }
            let temp_Phonenumber=parseInt(readline.question("phone number"));
            if (temp_Phonenumber==NaN){
                throw new Error("input of Phone number should be integer")
            }
            this.add(first_name,last_name,addres,city,temp_State,temp_Zip,temp_Phonenumber);
            }
            catch (e){
                console.log(e)
            }
            break;
        case 2:
            try{
                let firstName=readline.question("enter the firstname");
                this.edit(firstName);
            }
            catch (e){
                console.log(e)
            }
            break;
        case 3:
            try{
            let val=readline.question("enter the firstname to delete");
            this.delete(val);
        }
        catch (e){
            console.log(e);
        }
        break;
        case 4:
            try{
                this.display()
            }
            catch (e){
                console.log(e);
                
            }
            break;
        case 5:
            try{
                this.zipdisplay()
            }
            catch (e){
                console.log(e);
            }
            break;
        default:
            {
                console.log("please do enter any one of the above");
        }

    }
}
}

var a=new AddressBook()
// a.zipdisp()
// a.add("nisam","gs","addresspolum","citypolum","statepolum",223,657574);
// a.add("asfds","gs","addresspolum","citypolum","statepolum",723,657574);
// a.add("asfds","es","addresspolum","citypolum","statepolum",923,657574);
// a.add("nisam","as","addresspolum","citypolum","statepolum",123,657574);
// a.add("bisam","gs","addresspolum","citypolum","statepolum",123,657574);
// a.zipdisp()
a.main();
a.zipdisplay();
